import asyncio
import logging
import subprocess  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ app.py

from aiogram import types, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import keyboards.kb as kb
import keyboards.inl as inl
from services.weather_service import get_weather_forecast

router = Router()

class WeatherForecast(StatesGroup):
    user_id = State()
    start_point = State()
    end_point = State()
    other_points = State()
    time_interval = State() # –≤ –¥–Ω—è—Ö 


@router.message(CommandStart())
async def command_start_handler(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!', reply_markup=kb.get_forecast)

@router.message(Command("help"))
async def help_handler(message: types.Message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/weather - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /weather, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞, –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
    )
    await message.answer(help_text)

#–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.message(Command("weather"))
@router.message(F.text == '–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞')
async def weather_handler(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    await state.update_data(user_id=message.from_user.id)
    await state.set_state(WeatherForecast.start_point)

@router.callback_query(F.data == 'rewrite_start_point')
async def rewrite_start_point(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    await state.set_state(WeatherForecast.start_point)

@router.message(WeatherForecast.start_point)
async def process_start_point(message: types.Message, state: FSMContext):
    await state.update_data(start_point=message.text)
    await message.answer(f"–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {message.text}\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", reply_markup=inl.rewrite_start_point)
    await state.set_state(WeatherForecast.end_point)

#–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@router.callback_query(F.data == 'rewrite_end_point')
async def rewrite_end_point(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
    await state.set_state(WeatherForecast.end_point)

@router.message(WeatherForecast.end_point)
async def process_end_point(message: types.Message, state: FSMContext):
    await state.update_data(end_point=message.text)
    await message.answer(f"–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {message.text}",
                         reply_markup=inl.rewrite_end_point)
    
#–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
@router.callback_query(F.data == 'give_time_interval')
async def give_time_interval(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", reply_markup=kb.time_interval)
    await state.set_state(WeatherForecast.time_interval)

#–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(WeatherForecast.time_interval)
async def process_time_interval(message: types.Message, state: FSMContext):
    await state.update_data(time_interval=message.text)
    data = await state.get_data()
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
                         f"–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data['start_point']}\n"
                         f"–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {data['end_point']}\n"
                         f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ø—É–Ω–∫—Ç—ã: {data.get('other_points', '')}\n"
                         f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {data['time_interval']}\n"
                         f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                         reply_markup=inl.check_data)

async def check_data(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
                         f"–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data['start_point']}\n"
                         f"–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {data['end_point']}\n"
                         f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ø—É–Ω–∫—Ç—ã: {data.get('other_points', '')}\n"
                         f"–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {data['time_interval']}\n"
                         f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                         reply_markup=inl.check_data)

#–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
@router.callback_query(F.data == 'other_points')
async def other_points(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", reply_markup=None)
    await state.set_state(WeatherForecast.other_points)

@router.message(WeatherForecast.other_points)
async def process_other_points(message: types.Message, state: FSMContext):
    await state.update_data(other_points=message.text)
    await message.answer(await check_data(message, state))

#–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
@router.callback_query(F.data == 'correct_data')
async def correct_data(callback: types.CallbackQuery, state: FSMContext):

    await callback.message.answer("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã...")
    data = await state.get_data()
    logging.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data}")
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. id: {data['user_id']}")

    start_city = data.get('start_point')
    end_city = data.get('end_point')
    intermediate_cities = data.get('other_points', '')
    days_text = data.get('time_interval').strip()
    days = int(days_text.split()[0])

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    graph_url = f"http://127.0.0.1:5000/?start={start_city}&end={end_city}&days={days}"
    if intermediate_cities:
        graph_url += f"&via={intermediate_cities}"

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    graphs_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏", url=graph_url)]
    ])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
    forecast_message = await get_weather_forecast(
        start_city=start_city,
        end_city=end_city,
        intermediate_cities=intermediate_cities,
        days=days
    )

    try:
        subprocess.Popen(['python', 'services/web_weather/app.py'])  # –ó–∞–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
        logging.info("Dash-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Dash-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await callback.message.answer(forecast_message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", reply_markup=None)
        return
    
    await callback.message.answer(forecast_message, parse_mode='Markdown', reply_markup=graphs_keyboard)

